%_______________________________________________________________________________________________
%  Puma Optimizar Algorithm (POA)  
%
%  Source codes demo version 1.0                                                                      
%                                                                                                     
%  Developed in MATLAB R2011b(R2021a)                                                                   
%  Main Paper: { Cluster Computing
%  Authors: Benyamin Abdollahzadeh, Nima Khodadadi, Saeid Barshandeh, Pavel Trojovský ,Farhad Soleimanian Gharehchopogh, El-Sayed M. El-kenawy, Laith Abualigah, Seyedali Mirjalili
%  Puma optimizer (PO): a novel metaheuristic optimization algorithm and its application in machine learning
%  DOI: 10.1007/s10586-023-04221-5 }                                                                                                                                                            
%                                                                                                     
%  e-Mail: benyamin.abdolahzade@gmail.com  
%_______________________________________________________________________________________________



function Sol= Exploitation(Sol,lb,ub,dim,nSol,Best,MaxIter,Iter,CostFunction)
    Q=0.67;
    Beta=2; 
    for i = 1 : nSol
        beta1= 2*rand;
        beta2= randn(1,dim); 
        w= randn(1,dim); % Eq 37
        v=randn(1,dim);  % Eq 38
        F1=randn(1,dim).*exp(2-Iter*(2/MaxIter)); % Eq 35 
        F2= w.*v.^2.*cos((2*rand)*w); % Eq 36
        mbest = mean([Sol.X])/nSol;
        R_1 = 2*rand-1; % Eq 34
        S1=(2*rand-1 + randn(1,dim));
        S2=(F1*R_1.*Sol(i).X + F2*(1-R_1).*Best.X);
        VEC =S2 /S1;
        if rand() <= 0.5  
               Xatack= VEC;    
               if rand() > Q                  
                   NewSol(i).X= Best.X + beta1.*(exp(beta2)).*((Sol(randi(nSol,1)).X-Sol(i).X)); %#ok  % Eq 32
               else  
                   NewSol(i).X=  beta1.* Xatack-Best.X; %#ok  % Eq 32
               end  
        else           
            r1= round(1+ (nSol-1)* rand()); % Eq 33
            NewSol(i).X=   (mbest.* Sol(r1).X-((-1).^(randi([0 1],1,1))).*Sol(i).X)./(1+(Beta*rand)); %#ok  % Eq 32
        end

        NewSol(i).X = max(NewSol(i).X,lb);%#ok
        NewSol(i).X = min(NewSol(i).X,ub);%#ok
        NewSol(i).Cost = CostFunction(NewSol(i).X);%#ok

        if NewSol(i).Cost < Sol(i).Cost
            Sol(i) = NewSol(i);
        end
    end

end







